{"pluginName":"Plugin Name","pluginID":"pluginName","pluginDescription":"Plugin Description","pluginVersion":"1.0.0","pluginAuthor":"Plugin Author","pluginCategoryLabel":"Category Label","widgets":[{"widgetName":"Sample Widget","widgetID":"sampleWidget","prototype":{"posX":0.0,"posY":0.0,"sizeX":8.0,"sizeY":8.0,"simX":0.0,"simY":0.0,"simResizeX":0.0,"simResizeY":0.0,"sizeBounds":[],"params":{"count":0}},"fileContents":{"html":"<div class=\"centeredLayout\">\r\n    <button class=\"mainButton\">Click Me!</button>\r\n</div>","css":".centeredLayout {\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    display: grid;\r\n    place-items: center;\r\n}\r\n\r\nbutton {\r\n    width: calc(5 * var(--unit));\r\n    height: calc(1 * var(--unit));\r\n\r\n    font-size: calc(.5 * var(--unit));;\r\n}","js":"class sampleWidget {\r\n    constructor(_main, _projectData, _widgetData) {\r\n        this._main = _main;\r\n        this._projectData = _projectData;\r\n        this._widgetData = _widgetData;\r\n\r\n        this.update = function() {\r\n            // Called every time _widgetData changes\r\n            // Use this to set all displays, eg. text elements\r\n\r\n            if (this._widgetData.count !== 0) {\r\n                this.mainButton.textContent = `Clicked ${this._widgetData.count} times.`;\r\n            }\r\n        }\r\n\r\n\r\n        // Get objects by querying inside of _main\r\n        this.mainButton = this._main.getElementsByClassName(\"mainButton\")[0];\r\n\r\n\r\n        // Functions need to be defined outside of addEventListener.\r\n        // Else \"this\" will not be the object, but the DOM node.\r\n        let callback = () => {\r\n            this._widgetData.count++;\r\n            this.update();\r\n        }\r\n        this.mainButton.addEventListener(\"click\", callback);\r\n    }\r\n}\r\n\r\nmodule.exports = sampleWidget;","svg":"<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\r\n<!--! Font Awesome Free 6.4.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->\r\n    <path d=\"M234.5 5.7c13.9-5 29.1-5 43.1 0l192 68.6C495 83.4 512 107.5 512 134.6V377.4c0 27-17 51.2-42.5 60.3l-192 68.6c-13.9 5-29.1 5-43.1 0l-192-68.6C17 428.6 0 404.5 0 377.4V134.6c0-27 17-51.2 42.5-60.3l192-68.6zM256 66L82.3 128 256 190l173.7-62L256 66zm32 368.6l160-57.1v-188L288 246.6v188z\"/>\r\n</svg>"}}],"nodes":[{"nodeName":"Hello World","nodeID":"helloWorld","fileContents":{"js":"const NodeData = require(\"./../.dependencies/NodeData\");\nconst NodeInputTether = require(\"./../.dependencies/NodeInputTether\");\nconst NodeOutputTether = require(\"./../.dependencies/NodeOutputTether\");\n\n/**\n * Container for all data associated with your\n * custom node.\n */\nclass helloWorld extends NodeData {\n\n    constructor(outputRefs, context, rawNodeData) {\n        let inputs = [\n        ];\n        let outputs = [\n            new helloWorldOutput(\"Sample\", inputs, outputRefs[0], context),\n        ];\n\n        super(\"Sample\", inputs, outputs, rawNodeData);\n    }\n\n}\n\n/**\n * NodeOutputTether containing custom behavior for\n * resolving the Promise emitted by the process() function.\n */\nclass helloWorldOutput extends NodeOutputTether {\n\n    constructor(reqInputs, puts, id, context) {\n        super(reqInputs, puts, id, context);\n\n        this.process = function() {\n            return new Promise(async (resolve, reject) => {\n                resolve(0);\n            });\n        }\n    }\n\n}\n\nmodule.exports = helloWorld;"}},{"nodeName":"Hello You","nodeID":"helloYou","fileContents":{"js":"const NodeData = require(\"./../.dependencies/NodeData\");\nconst NodeInputTether = require(\"./../.dependencies/NodeInputTether\");\nconst NodeOutputTether = require(\"./../.dependencies/NodeOutputTether\");\n\n/**\n * Container for all data associated with your\n * custom node.\n */\nclass helloYou extends NodeData {\n\n    constructor(outputRefs, context, rawNodeData) {\n        let inputs = [\n        ];\n        let outputs = [\n            new helloYouOutput(\"Sample\", inputs, outputRefs[0], context),\n        ];\n\n        super(\"Sample\", inputs, outputs, rawNodeData);\n    }\n\n}\n\n/**\n * NodeOutputTether containing custom behavior for\n * resolving the Promise emitted by the process() function.\n */\nclass helloYouOutput extends NodeOutputTether {\n\n    constructor(reqInputs, puts, id, context) {\n        super(reqInputs, puts, id, context);\n\n        this.process = function() {\n            return new Promise(async (resolve, reject) => {\n                resolve(0);\n            });\n        }\n    }\n\n}\n\nmodule.exports = helloYou;"}}]}